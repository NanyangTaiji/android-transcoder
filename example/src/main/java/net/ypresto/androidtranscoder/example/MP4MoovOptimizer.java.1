package net.ypresto.androidtranscoder.example;

import android.util.Log;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;

/**
 * Utility class for optimizing MP4 files by moving the MOOV atom to the beginning of the file.
 * This enables fast start streaming without re-encoding the video content.
 */
public class MP4MoovOptimizer {
    private static final String TAG = "MP4MoovOptimizer";
    private static final boolean DEBUG = true;

    // Listener for tracking optimization progress
    public interface OptimizerListener {
        void onProgress(float progress);
        void onSuccess(File outputFile);
        void onError(Exception e);
    }

    // Atom container class
    private static class Atom {
        String type;
        long position;  // Position of the atom data (after header)
        long size;      // Size of the atom data (not including header)
        long headerPosition; // Position of the atom header

        Atom(String type, long headerPosition, long position, long size) {
            this.type = type;
            this.headerPosition = headerPosition;
            this.position = position;
            this.size = size;
        }

        @Override
        public String toString() {
            return "Atom{type='" + type + "', headerPos=" + headerPosition + ", dataPos=" + position + ", size=" + size + "}";
        }
    }

    /**
     * Optimize an MP4 file by moving the MOOV atom to the beginning.
     *
     * @param inputFile Input MP4 file
     * @param outputFile Output optimized MP4 file
     * @param listener Progress and completion listener
     */
    public static void optimize(final File inputFile, final File outputFile, final OptimizerListener listener) {
        new Thread(() -> {
            try {
                // Make sure output directory exists
                if (!outputFile.getParentFile().exists()) {
                    outputFile.getParentFile().mkdirs();
                }

                // If output file exists, delete it
                if (outputFile.exists()) {
                    outputFile.delete();
                }

                // Check if file is already optimized
                if (isOptimized(inputFile)) {
                    // Just copy the file as it's already optimized
                    copyFile(inputFile, outputFile);
                    if (listener != null) {
                        listener.onSuccess(outputFile);
                    }
                    return;
                }

                // Parse the input file to find atoms
                List<Atom> atoms = parseAtoms(inputFile);

                if (DEBUG) {
                    Log.d(TAG, "Found atoms:");
                    for (Atom atom : atoms) {
                        Log.d(TAG, atom.toString());
                    }
                }

                // Locate key atoms
                Atom ftypAtom = null;
                Atom moovAtom = null;
                Atom mdatAtom = null;

                long fileSize = inputFile.length();

                for (Atom atom : atoms) {
                    if ("ftyp".equals(atom.type)) {
                        ftypAtom = atom;
                    } else if ("moov".equals(atom.type)) {
                        moovAtom = atom;
                    } else if ("mdat".equals(atom.type)) {
                        mdatAtom = atom;
                    }
                }

                if (moovAtom == null) {
                    throw new IOException("No moov atom found in the input file");
                }

                if (mdatAtom == null) {
                    throw new IOException("No mdat atom found in the input file");
                }

                // Create and manipulate a copy of the moov atom
                byte[] moovData = readAtomData(inputFile, moovAtom);

                // Now calculate how atoms will be arranged in the output file and their shifts
                long newMoovPosition;
                long newMdatPosition;

                // Calculate offset shifts based on new arrangement (ftyp, moov, mdat)
                if (ftypAtom != null) {
                    // If ftyp exists: [ftyp][moov][mdat]
                    newMoovPosition = ftypAtom.size + 8; // ftyp header + data
                    newMdatPosition = newMoovPosition + moovAtom.size + 8; // moov header + data
                } else {
                    // If no ftyp: [moov][mdat]
                    newMoovPosition = 0;
                    newMdatPosition = moovAtom.size + 8; // moov header + data
                }

                // Calculate shift for mdat atom - how far it moves from original position
                long mdatShift = newMdatPosition - mdatAtom.headerPosition;

                if (DEBUG) {
                    Log.d(TAG, "Original mdat position: " + mdatAtom.headerPosition);
                    Log.d(TAG, "New mdat position: " + newMdatPosition);
                    Log.d(TAG, "Mdat shift: " + mdatShift);
                }

                // Update chunk offsets in moov
                ByteBuffer moovBuffer = ByteBuffer.wrap(moovData);
                moovBuffer.order(ByteOrder.BIG_ENDIAN);

                // Process moov contents
                updateChunkOffsets(moovBuffer, mdatShift);

                // Now write the output file
                try (RandomAccessFile inputRaf = new RandomAccessFile(inputFile, "r");
                     FileOutputStream outputStream = new FileOutputStream(outputFile)) {

                    // Total bytes for progress tracking
                    long totalBytes = fileSize;
                    long bytesProcessed = 0;

                    // 1. Write ftyp atom if present
                    if (ftypAtom != null) {
                        byte[] ftypData = new byte[(int)(ftypAtom.size + 8)];
                        inputRaf.seek(ftypAtom.headerPosition);
                        inputRaf.readFully(ftypData);
                        outputStream.write(ftypData);
                        bytesProcessed += ftypData.length;

                        // Report progress
                        if (listener != null) {
                            listener.onProgress((float)bytesProcessed / totalBytes);
                        }
                    }

                    // 2. Write the modified moov atom
                    // First write header
                    ByteBuffer moovHeader = ByteBuffer.allocate(8);
                    moovHeader.order(ByteOrder.BIG_ENDIAN);
                    moovHeader.putInt((int)(moovAtom.size + 8)); // Size including header
                    moovHeader.put("moov".getBytes());
                    moovHeader.flip();
                    outputStream.write(moovHeader.array());

                    // Then write modified data
                    outputStream.write(moovData);
                    bytesProcessed += moovAtom.size + 8;

                    // Report progress
                    if (listener != null) {
                        listener.onProgress((float)bytesProcessed / totalBytes);
                    }

                    // 3. Write mdat atom - copy it directly without modification
                    inputRaf.seek(mdatAtom.headerPosition);

                    // Write header (8 bytes)
                    byte[] header = new byte[8];
                    inputRaf.readFully(header);
                    outputStream.write(header);

                    // Write mdat data in chunks
                    long remaining = mdatAtom.size;
                    byte[] buffer = new byte[8192];

                    while (remaining > 0) {
                        int readSize = (int)Math.min(buffer.length, remaining);
                        int bytesRead = inputRaf.read(buffer, 0, readSize);

                        if (bytesRead == -1) break;

                        outputStream.write(buffer, 0, bytesRead);
                        remaining -= bytesRead;
                        bytesProcessed += bytesRead;

                        // Report progress periodically
                        if (listener != null && bytesRead % (buffer.length * 10) == 0) {
                            listener.onProgress((float)bytesProcessed / totalBytes);
                        }
                    }

                    // 4. Write any remaining atoms that aren't ftyp, moov, or mdat
                    for (Atom atom : atoms) {
                        if (!"ftyp".equals(atom.type) && !"moov".equals(atom.type) && !"mdat".equals(atom.type)) {
                            // Read in chunks to handle large files
                            inputRaf.seek(atom.headerPosition);

                            // Write header (8 bytes)
                            inputRaf.readFully(header);
                            outputStream.write(header);

                            // Write data in chunks
                            remaining = atom.size;

                            while (remaining > 0) {
                                int readSize = (int)Math.min(buffer.length, remaining);
                                int bytesRead = inputRaf.read(buffer, 0, readSize);

                                if (bytesRead == -1) break;

                                outputStream.write(buffer, 0, bytesRead);
                                remaining -= bytesRead;
                                bytesProcessed += bytesRead;

                                // Report progress periodically
                                if (listener != null && bytesRead % (buffer.length * 10) == 0) {
                                    listener.onProgress((float)bytesProcessed / totalBytes);
                                }
                            }

                            // Add header size to bytes processed
                            bytesProcessed += 8;
                        }
                    }

                    // Final progress update
                    if (listener != null) {
                        listener.onProgress(1.0f);
                        listener.onSuccess(outputFile);
                    }
                }
            } catch (Exception e) {
                Log.e(TAG, "Error optimizing MP4 file", e);
                if (listener != null) {
                    listener.onError(e);
                }
            }
        }).start();
    }

    /**
     * Read the raw data of an atom from the file
     */
    private static byte[] readAtomData(File file, Atom atom) throws IOException {
        try (RandomAccessFile raf = new RandomAccessFile(file, "r")) {
            byte[] data = new byte[(int)atom.size];
            raf.seek(atom.position);
            raf.readFully(data);
            return data;
        }
    }

    /**
     * Update all chunk offset tables (stco and co64) in the moov atom
     */
    private static void updateChunkOffsets(ByteBuffer buffer, long mdatShift) {
        if (DEBUG) {
            Log.d(TAG, "Updating chunk offsets with shift: " + mdatShift);
        }

        // Create a new buffer for easier navigation
        ByteBuffer moovData = buffer.duplicate();
        moovData.order(ByteOrder.BIG_ENDIAN);

        // Process all atoms in moov
        processContainer(moovData, mdatShift);
    }

    /**
     * Process atoms in a container atom
     */
    private static void processContainer(ByteBuffer data, long mdatShift) {
        // Save the original position
        int containerStart = data.position();
        int containerEnd = data.limit();

        // Process all atoms in this container
        while (data.position() < containerEnd - 8) {
            int atomStart = data.position();
            int atomSize = data.getInt();
            byte[] typeBytes = new byte[4];
            data.get(typeBytes);
            String atomType = new String(typeBytes);

            if (atomSize < 8) {
                // Invalid atom, exit
                break;
            }

            int atomEnd = atomStart + atomSize;
            if (atomEnd > containerEnd) {
                // Invalid atom size, exit
                break;
            }

            if (DEBUG) {
                Log.d(TAG, "Processing atom: " + atomType + " at pos " + atomStart + ", size " + atomSize);
            }

            // Handle each atom type
            if ("stco".equals(atomType)) {
                // Process 32-bit chunk offset table
                processStcoAtom(data, mdatShift);
            } else if ("co64".equals(atomType)) {
                // Process 64-bit chunk offset table
                processCo64Atom(data, mdatShift);
            } else if (isContainerAtom(atomType)) {
                // Recursively process container atoms
                int dataPos = data.position();
                ByteBuffer containerBuffer = data.duplicate();
                containerBuffer.order(ByteOrder.BIG_ENDIAN);
                containerBuffer.position(dataPos);
                containerBuffer.limit(atomEnd);
                processContainer(containerBuffer, mdatShift);
            }

            // Move to next atom
            data.position(atomEnd);
        }
    }

    /**
     * Check if atom type is a container that needs recursion
     */
    private static boolean isContainerAtom(String type) {
        return "moov".equals(type) || "trak".equals(type) ||
                "mdia".equals(type) || "minf".equals(type) ||
                "stbl".equals(type) || "edts".equals(type) ||
                "mvex".equals(type);
    }

    /**
     * Process stco atom (32-bit chunk offset table)
     */
    private static void processStcoAtom(ByteBuffer data, long mdatShift) {
        // Save current position
        int startPos = data.position();

        // Skip version & flags (4 bytes)
        data.position(startPos + 4);

        // Read entry count
        int entryCount = data.getInt();

        if (DEBUG) {
            Log.d(TAG, "Processing stco atom with " + entryCount + " entries");
        }

        // Update each entry
        for (int i = 0; i < entryCount; i++) {
            int offset = data.getInt();

            // Make sure we don't apply negative offsets
            // which would result in invalid file positions
            long newOffset = offset + mdatShift;
            if (newOffset < 0) {
                newOffset = 0;
            }

            // Check for potential integer overflow
            if (newOffset > Integer.MAX_VALUE) {
                Log.e(TAG, "Warning: Chunk offset exceeds 32-bit limit after shift");
                newOffset = Integer.MAX_VALUE;
            }

            data.position(data.position() - 4); // Go back 4 bytes
            data.putInt((int)newOffset);

            if (DEBUG && i < 5) {
                Log.d(TAG, "Updated chunk offset from " + offset + " to " + newOffset);
            }
        }
    }

    /**
     * Process co64 atom (64-bit chunk offset table)
     */
    private static void processCo64Atom(ByteBuffer data, long mdatShift) {
        // Save current position
        int startPos = data.position();

        // Skip version & flags (4 bytes)
        data.position(startPos + 4);

        // Read entry count
        int entryCount = data.getInt();

        if (DEBUG) {
            Log.d(TAG, "Processing co64 atom with " + entryCount + " entries");
        }

        // Update each entry
        for (int i = 0; i < entryCount; i++) {
            long offset = data.getLong();

            // Make sure we don't apply negative offsets
            long newOffset = offset + mdatShift;
            if (newOffset < 0) {
                newOffset = 0;
            }

            data.position(data.position() - 8); // Go back 8 bytes
            data.putLong(newOffset);

            if (DEBUG && i < 5) {
                Log.d(TAG, "Updated chunk offset from " + offset + " to " + newOffset);
            }
        }
    }

    /**
     * Check if the MP4 file is already optimized (moov atom before mdat)
     */
    public static boolean isOptimized(File file) throws IOException {
        List<Atom> atoms = parseAtoms(file);

        long moovPos = -1;
        long mdatPos = -1;

        for (Atom atom : atoms) {
            if ("moov".equals(atom.type)) {
                moovPos = atom.headerPosition;
            } else if ("mdat".equals(atom.type)) {
                mdatPos = atom.headerPosition;
            }

            // If we have both positions, we can determine
            if (moovPos != -1 && mdatPos != -1) {
                return moovPos < mdatPos;
            }
        }

        // Default to not optimized
        return false;
    }

    /**
     * Parse all atoms in the MP4 file
     */
    private static List<Atom> parseAtoms(File file) throws IOException {
        List<Atom> atoms = new ArrayList<>();

        try (RandomAccessFile raf = new RandomAccessFile(file, "r")) {
            ByteBuffer headerBuffer = ByteBuffer.allocate(8);
            headerBuffer.order(ByteOrder.BIG_ENDIAN);

            long fileSize = raf.length();
            long position = 0;

            while (position < fileSize - 8) {
                raf.seek(position);
                headerBuffer.clear();
                raf.getChannel().read(headerBuffer);
                headerBuffer.flip();

                int atomSize = headerBuffer.getInt();
                byte[] typeBytes = new byte[4];
                headerBuffer.get(typeBytes);
                String atomType = new String(typeBytes);

                if (atomSize < 8) {
                    // Invalid atom size
                    break;
                }

                long dataSize = atomSize - 8;

                // Handle 64-bit size atoms
                if (atomSize == 1) {
                    // Extended size atom (64-bit)
                    ByteBuffer extSizeBuffer = ByteBuffer.allocate(8);
                    extSizeBuffer.order(ByteOrder.BIG_ENDIAN);
                    raf.getChannel().read(extSizeBuffer);
                    extSizeBuffer.flip();
                    long longSize = extSizeBuffer.getLong();
                    dataSize = longSize - 16; // 8 for normal header + 8 for extended size
                    position += 8; // Account for 8 additional bytes read
                }

                atoms.add(new Atom(atomType, position, position + 8, dataSize));

                // Move to next atom
                if (atomSize == 0) {
                    // Atom extends to end of file
                    break;
                }
                position += atomSize;
            }
        }

        return atoms;
    }

    /**
     * Copy a file (used when input is already optimized)
     */
    private static void copyFile(File src, File dst) throws IOException {
        try (FileInputStream in = new FileInputStream(src);
             FileOutputStream out = new FileOutputStream(dst)) {
            FileChannel inChannel = in.getChannel();
            FileChannel outChannel = out.getChannel();
            inChannel.transferTo(0, inChannel.size(), outChannel);
        }
    }
}